{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"General Greenpeace Custom API (GPAPI) is a CiviCRM extension and uses the APIv3 infrastructure provided by CiviCRM. The goal for this extension is to bundle various CiviCRM APIs into a small set of easy-to-implement APIs that perform a specific task rather than provide a generic interface to various entities in CiviCRM. Consumers of this API do not need to be familiar with CiviCRM as a whole. In most scenarios, users of this API would only have access to the APIs defined in this extension (or even just a subset), rather than all APIs that are part of CiviCRM. Usage CiviCRM offers a number of ways to consume APIs. For typical use-cases of this extension, the REST interface is the most convenient option. The REST interface accepts GET and POST parameters and can return JSON or XML. For client applications written in PHP, CiviCRM offers an object-oriented API client . To obtain the endpoint URL for staging and production environments, please contact the database team at Greenpeace CEE. Note that API endpoints are not public and that network-level access will need to be set up. Authentication To authenticate requests to the API, two secret parameters are needed: The per-user API key ( api_key ) The site key ( key ) Please contact the database team at Greenpeace CEE to obtain these secrets. Parameter Types API parameters can be of the following types: String : Any sequence of characters Boolean : 0 or 1 Date : Date in format YYYY-MM-DD or YYYYMMDD DateTime : Date and time in format YYYY-MM-DD HH:MM:SS or YYYYMMDDHHMMSS Integer : Positive or negative natural number Decimal : Positive or negative decimal number with a maximum of two digits to the right of the decimal point Response Format The REST API response can be either JSON or XML. The default format is XML. The parameter json=1 can be added to request a JSON response API responses may contain the following fields: Field Type Description is_error boolean Whether an error occurred during the request. Errors can be anything from data validation issues (missing or invalid parameters) to runtime errors. In certain situations, for example during maintenance windows, the API may also use HTTP status codes in the 4xx and 5xx range to indicate that there was an error while processing the request. In these cases, the response might not contain the fields described in this section.","title":"Introduction"},{"location":"#general","text":"Greenpeace Custom API (GPAPI) is a CiviCRM extension and uses the APIv3 infrastructure provided by CiviCRM. The goal for this extension is to bundle various CiviCRM APIs into a small set of easy-to-implement APIs that perform a specific task rather than provide a generic interface to various entities in CiviCRM. Consumers of this API do not need to be familiar with CiviCRM as a whole. In most scenarios, users of this API would only have access to the APIs defined in this extension (or even just a subset), rather than all APIs that are part of CiviCRM.","title":"General"},{"location":"#usage","text":"CiviCRM offers a number of ways to consume APIs. For typical use-cases of this extension, the REST interface is the most convenient option. The REST interface accepts GET and POST parameters and can return JSON or XML. For client applications written in PHP, CiviCRM offers an object-oriented API client . To obtain the endpoint URL for staging and production environments, please contact the database team at Greenpeace CEE. Note that API endpoints are not public and that network-level access will need to be set up.","title":"Usage"},{"location":"#authentication","text":"To authenticate requests to the API, two secret parameters are needed: The per-user API key ( api_key ) The site key ( key ) Please contact the database team at Greenpeace CEE to obtain these secrets.","title":"Authentication"},{"location":"#parameter-types","text":"API parameters can be of the following types: String : Any sequence of characters Boolean : 0 or 1 Date : Date in format YYYY-MM-DD or YYYYMMDD DateTime : Date and time in format YYYY-MM-DD HH:MM:SS or YYYYMMDDHHMMSS Integer : Positive or negative natural number Decimal : Positive or negative decimal number with a maximum of two digits to the right of the decimal point","title":"Parameter Types"},{"location":"#response-format","text":"The REST API response can be either JSON or XML. The default format is XML. The parameter json=1 can be added to request a JSON response API responses may contain the following fields: Field Type Description is_error boolean Whether an error occurred during the request. Errors can be anything from data validation issues (missing or invalid parameters) to runtime errors. In certain situations, for example during maintenance windows, the API may also use HTTP status codes in the 4xx and 5xx range to indicate that there was an error while processing the request. In these cases, the response might not contain the fields described in this section.","title":"Response Format"},{"location":"donations/","text":"General The donations API, located in the \"OSF\" namespace, supports the following features: Creating or matching contacts Creating one-off donations Creating recurring donations (memberships/contracts) Creating webshop orders Retrieving a list of Web-related campaigns Retrieving a list of available webshop products Forwarding of Payment Service Provider (PSP) notifications A Standard use case would be that the API-using application sends the contact data to Civi to check, if the contact already exists there. If so, an existing contact_id is returned, otherwise a new contact_id is created and returned. Whith this information the application is able to send a contribution or a membership to Civi and connect it with the before communicated contact_id. If the membership or contribution is connected with an order of an item, the application will also create an activity from type webshop_order . Endpoints Campaigns (OSF.getcampaigns) Description The OSF.getcampaigns endpoint allows clients to retrieve a list of all the campaigns in Civi which the OSF is allowed to see. Parameters From the return values you shall use for input fields: external_id for campaign id for campaign_id Option Value (OSF.getproducts) Description The OSF.getproducts endpoint allows clients to retrieve a list of all products for the OSF available. Parameters From the returned values you have to use for the order_type field of the OSF.order action the field value ! Contacts (OSF.submit) Description The OSF.submit endpoint allows clients to transparently get or create contacts in CiviCRM based on their contact details. CiviCRM matches the submitted data to existing contacts based on rules defined within CiviCRM and either returns a new contact or the matching existing contact. Parameters Field (required) Type Default Description contact_type String Individual CiviCRM contact type first_name 1 String last_name 1 String prefix String Values available: Herr or Frau , @TODO: Gender/prefix gap? birth_date 1 Date Format: YYYY-MM-DD bpk 1 String Austrian tax office identifier for contact_type = Individual email 1 String Need to be valid format %@%.% otherwise it is garbaged by API phone String Is normalized by normalize extension iban 1 String Only used as a matching criteria street_address 1 String Street name and house number separated by one space postal_code 1 String city String country String Country code according to ISO 3166-1 alpha-2 newsletter Boolean 0 Whether this contact opted-in to the email newsletter Return Value Returns an array where the key id contains the CiviCRM Contact ID. Contribution (OSF.donation) Description The OSF.donation endpoint allows clients to transfer the donation data into CiviCRM. CiviCRM matches the submitted data to existing contacts based on the contact_id and returns the Contribution-ID in the Field id . Parameters Field (required) Type Default Description contact_id * Integer CiviCRM Contact ID campaign String External ID for donation-relevant campaign campaign_id Integer Overwrites campaign payment_instrument String Credit Card Supported methods: Credit Card , OOFF , PayPal , Sofort\u00fcberweisung , EPS total_amount * Float Format: 0.00 , amount of donation currency String EUR financial_type_id Integer 1 1 = Donation, 2 = Member Dues source String OSF Source of the donation (not used yet) iban * String IBAN (only for payment_instrument= OOFF ) bic * String BIC (only for payment_instrument= OOFF ) gp_iban String IBAN for Organisation account, will be created, if not exist trxn_id String Transaction-ID for donation, if payment_instrument is not OOFF . Unique * mandatory field Return Value Returns the Contribution-ID in the field id Activity (OSF.order) Description The OSF.order endpoint allows clients to transfer order data from ordered webshop-items into CiviCRM. CiviCRM matches the submitted data to existing contacts based on the contact_id and returns the Activity-ID in the Field id . Parameters Field (required) Type Default Description contact_id * Integer CiviCRM Contact ID campaign String External ID for donation-relevant campaign campaign_id Integer Overwrites campaign subject String Webshop Order Title of the created activity order_type * Integer Use osf.getproducts to get the right product value (use the value NOT the id ) order_count * Integer Amount of ordered items linked_contribution Integer CiviCRM ID of the contribution which paid the order (has to be empty if linked_membership is set!) linked_membership Integer CiviCRM ID of the membership which pays the order (has to be empty if linked_contribution is set!) shirt_size String If order type = 11 then choose: S , M , L , XL shirt_type String If order type = 11 then choose: M , W payment_received Boolean Set true , if the order is already payed multi_purpose String Field for additional information, where there is no parameter yet in the API implemented * mandatory field Return Value Returns the Activity-ID of the order in the field id Membership (OSF.contract) Description The OSF.contract endpoint allows clients to transfer all necessary data to create a membership in CiviCRM. CiviCRM matches the submitted data to existing contacts based on the contact_id and returns the Membership-ID in the Field id . Parameters Field (required) Type Default Description contact_id * Integer CiviCRM Contact ID campaign String External ID for membership source campaign campaign_id Integer Overwrites campaign frequency * Integer Number of debits a year for this membership (ONLY to be used for NON PSP memberships!) amount * Float Amount for each debit, format: 0.00 currency String CiviCRM default membership_type_id * Integer CiviCRM Membership Type ID (get the IDs from the CRM) iban * String IBAN or PSP payment token (e.g. Adyen shopperReference ) bic * String BIC or PSP account name (e.g. Adyen merchant name) payment_received Boolean false If true , create a contribution for the first payment and move the next debit about one month further (ONLY to be used for PSP memberships!) payment_service_provider String SEPA Choose from: adyen or payu trxn_id String Transaction-ID from donation if payment_received = true , Unique field payment_instrument String RCUR If sending PSP-Membership choose: Credit Card , PayPal , Sofort\u00fcberweisung , EPS , if SEPA-Membership choose: RCUR referrer_contact_id Integer CiviCRM Contact ID of the Referrer (MemberGetMember programme). Invalid values will be accepted and logged for further checks * mandatory field Return Value Returns the Membership-ID in the field id At least one of the following (combinations of) fields needs to be present: bpk first_name and email last_name and email iban and birth_date first_name and last_name and postal_code and street_address","title":"Online Donations"},{"location":"donations/#general","text":"The donations API, located in the \"OSF\" namespace, supports the following features: Creating or matching contacts Creating one-off donations Creating recurring donations (memberships/contracts) Creating webshop orders Retrieving a list of Web-related campaigns Retrieving a list of available webshop products Forwarding of Payment Service Provider (PSP) notifications A Standard use case would be that the API-using application sends the contact data to Civi to check, if the contact already exists there. If so, an existing contact_id is returned, otherwise a new contact_id is created and returned. Whith this information the application is able to send a contribution or a membership to Civi and connect it with the before communicated contact_id. If the membership or contribution is connected with an order of an item, the application will also create an activity from type webshop_order .","title":"General"},{"location":"donations/#endpoints","text":"","title":"Endpoints"},{"location":"donations/#campaigns-osfgetcampaigns","text":"","title":"Campaigns (OSF.getcampaigns)"},{"location":"donations/#description","text":"The OSF.getcampaigns endpoint allows clients to retrieve a list of all the campaigns in Civi which the OSF is allowed to see.","title":"Description"},{"location":"donations/#parameters","text":"From the return values you shall use for input fields: external_id for campaign id for campaign_id","title":"Parameters"},{"location":"donations/#option-value-osfgetproducts","text":"","title":"Option Value (OSF.getproducts)"},{"location":"donations/#description_1","text":"The OSF.getproducts endpoint allows clients to retrieve a list of all products for the OSF available.","title":"Description"},{"location":"donations/#parameters_1","text":"From the returned values you have to use for the order_type field of the OSF.order action the field value !","title":"Parameters"},{"location":"donations/#contacts-osfsubmit","text":"","title":"Contacts (OSF.submit)"},{"location":"donations/#description_2","text":"The OSF.submit endpoint allows clients to transparently get or create contacts in CiviCRM based on their contact details. CiviCRM matches the submitted data to existing contacts based on rules defined within CiviCRM and either returns a new contact or the matching existing contact.","title":"Description"},{"location":"donations/#parameters_2","text":"Field (required) Type Default Description contact_type String Individual CiviCRM contact type first_name 1 String last_name 1 String prefix String Values available: Herr or Frau , @TODO: Gender/prefix gap? birth_date 1 Date Format: YYYY-MM-DD bpk 1 String Austrian tax office identifier for contact_type = Individual email 1 String Need to be valid format %@%.% otherwise it is garbaged by API phone String Is normalized by normalize extension iban 1 String Only used as a matching criteria street_address 1 String Street name and house number separated by one space postal_code 1 String city String country String Country code according to ISO 3166-1 alpha-2 newsletter Boolean 0 Whether this contact opted-in to the email newsletter","title":"Parameters"},{"location":"donations/#return-value","text":"Returns an array where the key id contains the CiviCRM Contact ID.","title":"Return Value"},{"location":"donations/#contribution-osfdonation","text":"","title":"Contribution (OSF.donation)"},{"location":"donations/#description_3","text":"The OSF.donation endpoint allows clients to transfer the donation data into CiviCRM. CiviCRM matches the submitted data to existing contacts based on the contact_id and returns the Contribution-ID in the Field id .","title":"Description"},{"location":"donations/#parameters_3","text":"Field (required) Type Default Description contact_id * Integer CiviCRM Contact ID campaign String External ID for donation-relevant campaign campaign_id Integer Overwrites campaign payment_instrument String Credit Card Supported methods: Credit Card , OOFF , PayPal , Sofort\u00fcberweisung , EPS total_amount * Float Format: 0.00 , amount of donation currency String EUR financial_type_id Integer 1 1 = Donation, 2 = Member Dues source String OSF Source of the donation (not used yet) iban * String IBAN (only for payment_instrument= OOFF ) bic * String BIC (only for payment_instrument= OOFF ) gp_iban String IBAN for Organisation account, will be created, if not exist trxn_id String Transaction-ID for donation, if payment_instrument is not OOFF . Unique * mandatory field","title":"Parameters"},{"location":"donations/#return-value_1","text":"Returns the Contribution-ID in the field id","title":"Return Value"},{"location":"donations/#activity-osforder","text":"","title":"Activity (OSF.order)"},{"location":"donations/#description_4","text":"The OSF.order endpoint allows clients to transfer order data from ordered webshop-items into CiviCRM. CiviCRM matches the submitted data to existing contacts based on the contact_id and returns the Activity-ID in the Field id .","title":"Description"},{"location":"donations/#parameters_4","text":"Field (required) Type Default Description contact_id * Integer CiviCRM Contact ID campaign String External ID for donation-relevant campaign campaign_id Integer Overwrites campaign subject String Webshop Order Title of the created activity order_type * Integer Use osf.getproducts to get the right product value (use the value NOT the id ) order_count * Integer Amount of ordered items linked_contribution Integer CiviCRM ID of the contribution which paid the order (has to be empty if linked_membership is set!) linked_membership Integer CiviCRM ID of the membership which pays the order (has to be empty if linked_contribution is set!) shirt_size String If order type = 11 then choose: S , M , L , XL shirt_type String If order type = 11 then choose: M , W payment_received Boolean Set true , if the order is already payed multi_purpose String Field for additional information, where there is no parameter yet in the API implemented * mandatory field","title":"Parameters"},{"location":"donations/#return-value_2","text":"Returns the Activity-ID of the order in the field id","title":"Return Value"},{"location":"donations/#membership-osfcontract","text":"","title":"Membership (OSF.contract)"},{"location":"donations/#description_5","text":"The OSF.contract endpoint allows clients to transfer all necessary data to create a membership in CiviCRM. CiviCRM matches the submitted data to existing contacts based on the contact_id and returns the Membership-ID in the Field id .","title":"Description"},{"location":"donations/#parameters_5","text":"Field (required) Type Default Description contact_id * Integer CiviCRM Contact ID campaign String External ID for membership source campaign campaign_id Integer Overwrites campaign frequency * Integer Number of debits a year for this membership (ONLY to be used for NON PSP memberships!) amount * Float Amount for each debit, format: 0.00 currency String CiviCRM default membership_type_id * Integer CiviCRM Membership Type ID (get the IDs from the CRM) iban * String IBAN or PSP payment token (e.g. Adyen shopperReference ) bic * String BIC or PSP account name (e.g. Adyen merchant name) payment_received Boolean false If true , create a contribution for the first payment and move the next debit about one month further (ONLY to be used for PSP memberships!) payment_service_provider String SEPA Choose from: adyen or payu trxn_id String Transaction-ID from donation if payment_received = true , Unique field payment_instrument String RCUR If sending PSP-Membership choose: Credit Card , PayPal , Sofort\u00fcberweisung , EPS , if SEPA-Membership choose: RCUR referrer_contact_id Integer CiviCRM Contact ID of the Referrer (MemberGetMember programme). Invalid values will be accepted and logged for further checks * mandatory field","title":"Parameters"},{"location":"donations/#return-value_3","text":"Returns the Membership-ID in the field id At least one of the following (combinations of) fields needs to be present: bpk first_name and email last_name and email iban and birth_date first_name and last_name and postal_code and street_address","title":"Return Value"},{"location":"engagement/","text":"General The Engage API, located in the \"Engage\" namespace, supports the following features: Creating or matching contacts Creating activities from type petition_signature Retrieving a list of petition related campaigns Retrieving a list of available media for how a petiton can be transferred A Standard use case would be that the API-using application sends the contact data and petition data to Civi. If the contact already exists in Civi, the petition signature activity is created at that found contact, otherwise a new contact is created and the petition signature activity is created at that found contact. Endpoints Surveys (Engage.getpetitions) Description The Engage.getpetitions endpoint allows clients to retrieve a list of all the petitions in Civi. Parameters From the return values you shall use for input fields: id for petition_id Option Value (Engage.getmedia) Description The Engage.getmedia endpoint allows clients to retrieve a list of all contact media used by the Engagement Tool. Parameters From the returned values you have to use for the medium_id field of the Engage.getmedia action the field value NOT the returned field id ! Contacts (Engage.signpetition) Description The Engage.signpetition endpoint allows clients to transparently get or create contacts in CiviCRM based on their contact details. CiviCRM matches the submitted data to existing contacts based on rules defined within CiviCRM and either returns a new contact or the matching existing contact and then creating an activity from type petition_signature . Parameters Field (required) Type Default Description contact_type String Individual CiviCRM contact type first_name 1 String last_name 1 String prefix String Values available: Herr or Frau , @TODO: Gender/prefix gap? birth_date 1 Date Format: YYYY-MM-DD bpk 1 String Austrian tax office identifier for contact_type = Individual email 1 String Need to be valid format %@%.% otherwise it is garbaged by API phone String Is normalized by normalize extension street_address 1 String Street name and house number separated by one space postal_code 1 String city String country String Country code according to ISO 3166-1 alpha-2 medium_id String According value field from Engage.getmedia campaign String External ID for donation-relevant campaign campaign_id Integer Overwrites campaign petition_id Integer Overwrites campaign and campaign_id otherwise the DEFAULT-petition for the choosen campaign is used petition_dialoger Integer CiviCRM ID of the Direct Dialog Canvasser signature_date String Date of the petition_signature, Format: YYYYMMDDHHIISS (PHP Format: YmdHis ) newsletter Boolean 0 Whether this contact opted-in to the \"Community NL\" email newsletter Return Value Returns the Contact-ID in the field id and in the values array an object with the created IDs with their respective keys. At least one of the following (combinations of) fields needs to be present: (Stimmt das wirklich? Nochmal nachsehen!) bpk first_name and email last_name and email first_name and last_name and postal_code and street_address","title":"Engagement"},{"location":"engagement/#general","text":"The Engage API, located in the \"Engage\" namespace, supports the following features: Creating or matching contacts Creating activities from type petition_signature Retrieving a list of petition related campaigns Retrieving a list of available media for how a petiton can be transferred A Standard use case would be that the API-using application sends the contact data and petition data to Civi. If the contact already exists in Civi, the petition signature activity is created at that found contact, otherwise a new contact is created and the petition signature activity is created at that found contact.","title":"General"},{"location":"engagement/#endpoints","text":"","title":"Endpoints"},{"location":"engagement/#surveys-engagegetpetitions","text":"","title":"Surveys (Engage.getpetitions)"},{"location":"engagement/#description","text":"The Engage.getpetitions endpoint allows clients to retrieve a list of all the petitions in Civi.","title":"Description"},{"location":"engagement/#parameters","text":"From the return values you shall use for input fields: id for petition_id","title":"Parameters"},{"location":"engagement/#option-value-engagegetmedia","text":"","title":"Option Value (Engage.getmedia)"},{"location":"engagement/#description_1","text":"The Engage.getmedia endpoint allows clients to retrieve a list of all contact media used by the Engagement Tool.","title":"Description"},{"location":"engagement/#parameters_1","text":"From the returned values you have to use for the medium_id field of the Engage.getmedia action the field value NOT the returned field id !","title":"Parameters"},{"location":"engagement/#contacts-engagesignpetition","text":"","title":"Contacts (Engage.signpetition)"},{"location":"engagement/#description_2","text":"The Engage.signpetition endpoint allows clients to transparently get or create contacts in CiviCRM based on their contact details. CiviCRM matches the submitted data to existing contacts based on rules defined within CiviCRM and either returns a new contact or the matching existing contact and then creating an activity from type petition_signature .","title":"Description"},{"location":"engagement/#parameters_2","text":"Field (required) Type Default Description contact_type String Individual CiviCRM contact type first_name 1 String last_name 1 String prefix String Values available: Herr or Frau , @TODO: Gender/prefix gap? birth_date 1 Date Format: YYYY-MM-DD bpk 1 String Austrian tax office identifier for contact_type = Individual email 1 String Need to be valid format %@%.% otherwise it is garbaged by API phone String Is normalized by normalize extension street_address 1 String Street name and house number separated by one space postal_code 1 String city String country String Country code according to ISO 3166-1 alpha-2 medium_id String According value field from Engage.getmedia campaign String External ID for donation-relevant campaign campaign_id Integer Overwrites campaign petition_id Integer Overwrites campaign and campaign_id otherwise the DEFAULT-petition for the choosen campaign is used petition_dialoger Integer CiviCRM ID of the Direct Dialog Canvasser signature_date String Date of the petition_signature, Format: YYYYMMDDHHIISS (PHP Format: YmdHis ) newsletter Boolean 0 Whether this contact opted-in to the \"Community NL\" email newsletter","title":"Parameters"},{"location":"engagement/#return-value","text":"Returns the Contact-ID in the field id and in the values array an object with the created IDs with their respective keys. At least one of the following (combinations of) fields needs to be present: (Stimmt das wirklich? Nochmal nachsehen!) bpk first_name and email last_name and email first_name and last_name and postal_code and street_address","title":"Return Value"},{"location":"newsletter/","text":"General The Newsletter API, located in the \"Newsletter\" namespace, supports the following features: Creating or matching contacts Retrieving a list of newsletter groups A Standard use case would be that the API-using application sends the contact data and group_ids to Civi. If the contact already exists in Civi, the newsletter group(s) will be registered at that found contact, otherwise a new contact is created and the newsletter group(s) will be registered with the newly created contact. Endpoints Groups (Newsletter.getgroups) Description The Newsletter.getgroups endpoint allows clients to retrieve a list of all available newsletter groups in Civi. Parameters From the return values you shall use for input fields: id for goup_ids Contacts (Newsletter.subscribe) Description The Newsletter.subscribe endpoint allows clients to transparently get or create contacts in CiviCRM based on their contact details. CiviCRM matches the submitted data to existing contacts based on rules defined within CiviCRM and register the newsletter groups sent with the call there or a new contact is created and the transfered newsletter groups are registered with the newly created contact. Parameters Field (required) Type Default Description contact_type String Individual CiviCRM contact type first_name String last_name String prefix String Values available: Herr or Frau , @TODO: Gender/prefix gap? birth_date Date Format: YYYY-MM-DD bpk String Austrian tax office identifier for contact_type = Individual email * String Need to be valid format %@%.% otherwise it is garbaged by API phone String Is normalized by normalize extension street_address String Street name and house number separated by one space postal_code String city String country String Country code according to ISO 3166-1 alpha-2 group_ids String According to Newsletter.getgroups IDs, comma separated (21-Community NL) * mandatory field Return Value Returns the Contact-ID in the field id and in the values array an object with the created IDs with their respective keys. Groups (Newsletter.unsubscribe) Description The Newsletter.unsubscribe endpoint allows clients to unsubscribe a contact from a given newsletter group. CiviCRM matches the submitted data to an existing contact_id and deregister the newsletter groups sent with the call. Parameters Field (required) Type Default Description contact_id * Integer CiviCRM Contact ID group_ids String According to Newsletter.getgroups IDs, comma separated (f.e. 21-Community NL) opt_out Boolean 0 1 means that the contact shall not receive any mass mailing at all anymore! Return Value Returns a failure or success message.","title":"Newsletter"},{"location":"newsletter/#general","text":"The Newsletter API, located in the \"Newsletter\" namespace, supports the following features: Creating or matching contacts Retrieving a list of newsletter groups A Standard use case would be that the API-using application sends the contact data and group_ids to Civi. If the contact already exists in Civi, the newsletter group(s) will be registered at that found contact, otherwise a new contact is created and the newsletter group(s) will be registered with the newly created contact.","title":"General"},{"location":"newsletter/#endpoints","text":"","title":"Endpoints"},{"location":"newsletter/#groups-newslettergetgroups","text":"","title":"Groups (Newsletter.getgroups)"},{"location":"newsletter/#description","text":"The Newsletter.getgroups endpoint allows clients to retrieve a list of all available newsletter groups in Civi.","title":"Description"},{"location":"newsletter/#parameters","text":"From the return values you shall use for input fields: id for goup_ids","title":"Parameters"},{"location":"newsletter/#contacts-newslettersubscribe","text":"","title":"Contacts (Newsletter.subscribe)"},{"location":"newsletter/#description_1","text":"The Newsletter.subscribe endpoint allows clients to transparently get or create contacts in CiviCRM based on their contact details. CiviCRM matches the submitted data to existing contacts based on rules defined within CiviCRM and register the newsletter groups sent with the call there or a new contact is created and the transfered newsletter groups are registered with the newly created contact.","title":"Description"},{"location":"newsletter/#parameters_1","text":"Field (required) Type Default Description contact_type String Individual CiviCRM contact type first_name String last_name String prefix String Values available: Herr or Frau , @TODO: Gender/prefix gap? birth_date Date Format: YYYY-MM-DD bpk String Austrian tax office identifier for contact_type = Individual email * String Need to be valid format %@%.% otherwise it is garbaged by API phone String Is normalized by normalize extension street_address String Street name and house number separated by one space postal_code String city String country String Country code according to ISO 3166-1 alpha-2 group_ids String According to Newsletter.getgroups IDs, comma separated (21-Community NL) * mandatory field","title":"Parameters"},{"location":"newsletter/#return-value","text":"Returns the Contact-ID in the field id and in the values array an object with the created IDs with their respective keys.","title":"Return Value"},{"location":"newsletter/#groups-newsletterunsubscribe","text":"","title":"Groups (Newsletter.unsubscribe)"},{"location":"newsletter/#description_2","text":"The Newsletter.unsubscribe endpoint allows clients to unsubscribe a contact from a given newsletter group. CiviCRM matches the submitted data to an existing contact_id and deregister the newsletter groups sent with the call.","title":"Description"},{"location":"newsletter/#parameters_2","text":"Field (required) Type Default Description contact_id * Integer CiviCRM Contact ID group_ids String According to Newsletter.getgroups IDs, comma separated (f.e. 21-Community NL) opt_out Boolean 0 1 means that the contact shall not receive any mass mailing at all anymore!","title":"Parameters"},{"location":"newsletter/#return-value_1","text":"Returns a failure or success message.","title":"Return Value"}]}